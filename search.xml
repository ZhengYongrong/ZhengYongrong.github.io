<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL语句技巧：查询存在一个表而不在另一个表中的数据记录</title>
      <link href="/2019/06/19/SQL%E8%AF%AD%E5%8F%A5%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AA%E8%A1%A8%E8%80%8C%E4%B8%8D%E5%9C%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/06/19/SQL%E8%AF%AD%E5%8F%A5%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AA%E8%A1%A8%E8%80%8C%E4%B8%8D%E5%9C%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一-仅适用单个字段"><a href="#方法一-仅适用单个字段" class="headerlink" title="方法一(仅适用单个字段)"></a>方法一(仅适用单个字段)</h2><p>使用 not in ,容易理解,效率低</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> A.ID <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> A.ID <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">ID</span> <span class="hljs-keyword">from</span> B)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/201906191948308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM0MjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="方法二（适用多个字段匹配）"><a href="#方法二（适用多个字段匹配）" class="headerlink" title="方法二（适用多个字段匹配）"></a>方法二（适用多个字段匹配）</h2><p>使用 left join…on… , B.ID isnull  表示左连接之后在B.ID 字段为 null的记录</p><figure class="hljs highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> A.ID <span class="hljs-keyword">from</span> A <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> B <span class="hljs-keyword">on</span> A.ID=B.ID <span class="hljs-keyword">where</span> B.ID <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190619194925153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM0MjcwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="方法三（适用多个字段匹配）"><a href="#方法三（适用多个字段匹配）" class="headerlink" title="方法三（适用多个字段匹配）"></a>方法三（适用多个字段匹配）</h2><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> B <span class="hljs-keyword">where</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">num</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> A.ID = B.ID) = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190619194901174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM0MjcwMg==,size_16,color_FFFFFF,t_70" alt="!\[在这里插入图片描述\](https://img-blog.csdnimg.cn/20190619194648578.png"></p><h2 id="方法四（适用多个字段匹配）"><a href="#方法四（适用多个字段匹配）" class="headerlink" title="方法四（适用多个字段匹配）"></a>方法四（适用多个字段匹配）</h2><figure class="hljs highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> B <span class="hljs-keyword">where</span> A.ID=B.ID)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190619194750133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM0MjcwMg==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate关于FetchType.LAZY和FetchType.EAGER什么区别</title>
      <link href="/2019/06/17/hibernate%E5%85%B3%E4%BA%8EFetchType-LAZY%E5%92%8CFetchType-EAGER%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/06/17/hibernate%E5%85%B3%E4%BA%8EFetchType-LAZY%E5%92%8CFetchType-EAGER%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>1、<strong>FetchType.LAZY：</strong>懒加载，加载一个实体时，定义懒加载的属性不会马上从数据库中加载。</p><p>2、<strong>FetchType.EAGER：</strong>急加载，加载一个实体时，定义急加载的属性会立即从数据库中加载。</p><h3 id="example："><a href="#example：" class="headerlink" title="example："></a>example：</h3><ul><li>比方User类有两个属性，name跟address，就像百度知道，登录后用户名是需要显示出来的，此属性用到的几率极大，要马上到数据库查，用急加载；</li><li>而用户地址大多数情况下不需要显示出来，只有在查看用户资料是才需要显示，需要用了才查数据库，用懒加载就好了。所以，并不是一登录就把用户的所有资料都加载到对象中;</li><li>于是有了这两种加载模式。</li></ul><h2 id="A、实体对象的延迟加载"><a href="#A、实体对象的延迟加载" class="headerlink" title="A、实体对象的延迟加载 "></a>A、实体对象的延迟加载 </h2><p>如果想对实体对象使用延迟加载，必须要在实体的映射配置文件中进行相应的配置，如下所示：</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">hibernate-mapping</span>&gt;</span><br>　<span class="hljs-tag">&lt;<span class="hljs-name">class</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”com.neusoft.entity.User”</span> <span class="hljs-attr">table</span>=<span class="hljs-string">”user”</span> <span class="hljs-attr">lazy</span>=<span class="hljs-string">”true”</span>&gt;</span><br>    　……<br>　<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">hibernate-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般是对整个实体对象进行设置是否是懒加载，而非单个属性。若该实体对象关联某个对象，如下面：</p><h2 id="关联的实体对象通常是懒加载"><a href="#关联的实体对象通常是懒加载" class="headerlink" title="关联的实体对象通常是懒加载"></a>关联的实体对象通常是懒加载</h2><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span>(name=<span class="hljs-string">"t_company"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Company</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseEntity</span>&lt;<span class="hljs-title">Long</span>&gt;<br></span>&#123;<br><span class="hljs-keyword">private</span> String companyName;<br><br><span class="hljs-keyword">private</span> List&lt;Flight&gt; flights = <span class="hljs-keyword">new</span> ArrayList&lt;Flight&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCompanyName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> companyName;<br>&#125;<br><br><span class="hljs-meta">@OneToMany</span>(cascade=CascadeType.ALL,mappedBy=<span class="hljs-string">"company"</span>,fetch=FetchType.LAZY)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Flight&gt; <span class="hljs-title">getFlights</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> flights;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlights</span><span class="hljs-params">(List&lt;Flight&gt; flights)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.flights = flights;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCompanyName</span><span class="hljs-params">(String companyName)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.companyName = companyName;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>mappedBy=”company”:设置mappedBy表示声明自己不是一对多的关系维护端，由对方来维护，是在一的一方进行声明的。mappedBy的值应该为一的一方的表名。</p></li><li><p>fetch=FetchType.LAZY:关联的实体对象是懒加载</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 类class或者list&lt;class&gt;转化为的Json</title>
      <link href="/2019/06/16/Java-%E7%B1%BBclass%E6%88%96%E8%80%85list-class-%E8%BD%AC%E5%8C%96%E4%B8%BA%E7%9A%84Json/"/>
      <url>/2019/06/16/Java-%E7%B1%BBclass%E6%88%96%E8%80%85list-class-%E8%BD%AC%E5%8C%96%E4%B8%BA%E7%9A%84Json/</url>
      
        <content type="html"><![CDATA[<p>Java的Json解析包FastJson使用<br>阿里巴巴FastJson是一个Json处理工具包，包括“序列化”和“反序列化”两部分，它具备如下特征：<br>速度最快，测试表明，fastjson具有极快的性能，超越任其他的Java Json parser。包括自称最快的JackJson；<br>功能强大，完全支持Java Bean、集合、Map、日期、Enum，支持范型，支持自省；无依赖，能够直接运行在Java SE 5.0以上版本；支持Android；开源 (Apache 2.0)</p><p>源码地址：<a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">https://github.com/alibaba/fastjson</a><br><strong>Maven</strong></p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.54<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Fastjson API入口类是com.alibaba.fastjson.JSON，常用的序列化操作都可以在JSON类上的静态方法直接完成。</p><figure class="hljs highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">*<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> toJSONString(<span class="hljs-keyword">Object</span> object); <span class="hljs-comment">// 将JavaBean序列化为JSON文本 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> toJSONString(<span class="hljs-keyword">Object</span> object, <span class="hljs-built_in">boolean</span> prettyFormat); <span class="hljs-comment">// 将JavaBean序列化为带格式的JSON文本 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">Object</span> toJSON(<span class="hljs-keyword">Object</span> javaObject); 将JavaBean转换为<span class="hljs-keyword">JSONObject</span>或者<span class="hljs-keyword">JSONArray</span>。<br></code></pre></td></tr></table></figure><figure class="hljs highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">package</span> bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassToJson</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassToJson</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="hljs highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">public static <span class="hljs-keyword">void</span> main(<span class="hljs-built_in">String</span>[] args) &#123;<br>        ClassToJson classTJ=<span class="hljs-keyword">new</span> ClassToJson(<span class="hljs-number">15</span>,<span class="hljs-string">"刘诗诗"</span>);<br>        List&lt;ClassToJson&gt; <span class="hljs-built_in">list</span>=<span class="hljs-keyword">new</span> ArrayList&lt;ClassToJson&gt;();<br>        <span class="hljs-built_in">list</span>.add(classTJ);<br><br>        <span class="hljs-built_in">list</span>.add(<span class="hljs-keyword">new</span> ClassToJson(<span class="hljs-number">18</span>,<span class="hljs-string">"Stephen"</span>));<br>        <span class="hljs-comment">//将集合或者对象序例化成JSON</span><br>        <span class="hljs-built_in">JSON</span> json= (<span class="hljs-built_in">JSON</span>) <span class="hljs-built_in">JSON</span>.toJSON(<span class="hljs-built_in">list</span>);<br>        System.out.println(json);<br>        System.out.println(<span class="hljs-built_in">JSON</span>.toJSON(<span class="hljs-built_in">list</span>));<br>        System.out.println(<span class="hljs-built_in">JSON</span>.toJSON(classTJ));<br>        System.out.println(<span class="hljs-built_in">JSON</span>.toJSONString(<span class="hljs-built_in">list</span>));<br>        System.out.println(<span class="hljs-built_in">JSON</span>.toJSONString(classTJ));<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法：使用Java实现两个矩阵相乘</title>
      <link href="/2019/06/16/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BD%BF%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98/"/>
      <url>/2019/06/16/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BD%BF%E7%94%A8Java%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<figure class="hljs highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">juzhengxiangcheng</span> </span>&#123;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] matrix(<span class="hljs-keyword">int</span> a[][], <span class="hljs-keyword">int</span> b[][]) &#123;<br>        <span class="hljs-comment">//当a的列数与矩阵b的行数不相等时，不能进行点乘，返回null</span><br>        <span class="hljs-keyword">if</span> (a.length != b[<span class="hljs-number">0</span>].length)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//c矩阵的行数y，与列数x</span><br>       <span class="hljs-keyword">int</span> N=a.length;<br>        <span class="hljs-keyword">int</span> c[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N][N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; N; j++)<br>                <span class="hljs-comment">//c矩阵的第i行第j列所对应的数值，等于a矩阵的第i行分别乘以b矩阵的第j列之和</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; N; k++)<br>                    c[i][j] += a[i][k] * b[k][j];<br>        <span class="hljs-keyword">return</span> c;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo+Github搭建个人博客</title>
      <link href="/2019/06/16/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/06/16/%E5%9F%BA%E4%BA%8EHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>一直想要拥有自己的一个博客，CSDN，那些又觉得不够个性化</p><p> <strong>Github搭建博客的优点：</strong></p><blockquote><p>1、不需要域名和服务器<br>2、访问自己博客的时候没有广告<br>3、可以自己修改样式，能根据自己的需求加功能。</p></blockquote><p>首先来一篇预览的博客，让大家看看效果：这是我自己用Github搭建的：<a href="https://zhengyongrong.github.io/" target="_blank" rel="noopener">https://zhengyongrong.github.io/</a></p><h2 id="以下操作基于Windows环境"><a href="#以下操作基于Windows环境" class="headerlink" title="以下操作基于Windows环境"></a><strong>以下操作基于Windows环境</strong></h2><p>首先博客搭建的环境﻿</p><blockquote><p>node.js 因为整个博客框架是基于node.js的，所以必须安装node.js环境，安装过程中一路Next即可。<br>Git客户端 Git用来将hexo的相关文件部署到Github上去，安装过程一路Next。</p></blockquote><h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h2><blockquote><p>环境准备好以后，我们便可以安装hexo的博客框架。<br>在桌面鼠标右击，选择 Git Bash Here,</p></blockquote><p>然后就会打开Git的命令窗口，在命令窗口输入安装命令后，然后回车</p><figure class="hljs highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm <span class="hljs-keyword">install</span> -g hexo<br></code></pre></td></tr></table></figure><p>然后在指定的盘新建一个名为“ hexo ”的文件夹，然后以下的命令都在新建的hexo文件下进行</p><blockquote><p>在这个新建的文件夹内鼠标右键，同样选择Git Bash Here,输入初始化命令，然后回车;<br>等命令执行完，就会看到生成了一系列的文件；</p></blockquote><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">hexo init</span><br></code></pre></td></tr></table></figure><p>安装相关的依赖包，输入下面的命令，回车</p><figure class="hljs highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>接着在hexo文件夹下面继续执行以下命令</p><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">hexo g<br>hexo s</span><br></code></pre></td></tr></table></figure><p>命令执行完后浏览器访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ,就会看到hexo的初始界面，是不是有着一丝丝的成就感？但是，这个界面还是在本地，别人并不能看到，想要别人看到，我们就必须将这些文件部署到Github上去。</p><h2 id="创建Github号"><a href="#创建Github号" class="headerlink" title="创建Github号"></a>创建Github号</h2><blockquote><p>首先我们需要到Github官网创建一个账号，创建链接：Github</p></blockquote><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><blockquote><p>创建完账号后我们新建一个Repository</p></blockquote><p><strong>这里要注意仓库的名字，必须是自己的Github账户的用户名.github.io</strong></p><h2 id="部署文件到Github"><a href="#部署文件到Github" class="headerlink" title="部署文件到Github"></a>部署文件到Github</h2><blockquote><p>接下来就是部署文件到Github了。<br>用Nodepad++打开hexo文件夹下面的_config.yml文件，该文件的最下面找到关键字deploy,然后修改成下面这样，用我自己的做案例</p></blockquote><figure class="hljs highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> <span class="hljs-params">&lt;https://github.com/Chakid/Chakid.github.io.git&gt;</span><br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>这里拥有两个注意点：</p><blockquote><p>1、每个冒号后面都有一个空格，修改的时候别忘了；<br>2、注意修改的对应点要是自己的Github的账户名，别修改错了。<br>修改完保存<br>但是这样还不能连接到 github ，我们还需要配置SSH，找到路径C:\Users\leeyom.ssh，如果已经存在SSH Keys ，直接删除.ssh 文件夹下的所有的文件，如下图。</p></blockquote><p>然后继续在hexo文件夹下面输入下面的指令</p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">ssh-keygen</span> <span class="hljs-selector-tag">-t</span> <span class="hljs-selector-tag">rsa</span> <span class="hljs-selector-tag">-C</span> "1547658639@<span class="hljs-keyword">qq</span>.<span class="hljs-keyword">com</span>"<br></code></pre></td></tr></table></figure><p>然后再回车三次，等命令执行完，再输入以下指令</p><figure class="hljs highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">eval `ssh-agent -s`<br>ssh-add<br></code></pre></td></tr></table></figure><p>然后输入指令拷贝Key</p><figure class="hljs highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">clip &lt; ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br></code></pre></td></tr></table></figure><p>然后进入自己刚注册的Github</p><p>接下来测试ssh是否配好了，输入下面的指令，会提示你输入yes/no你输入yes就行，这样ssh就配好了，接下来我们就可以将项目部署到Github上面了。</p><figure class="hljs highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-selector-tag">ssh</span> <span class="hljs-selector-tag">-T</span> <span class="hljs-selector-tag">git</span>@<span class="hljs-keyword">github</span>.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><p>然后执行以下命令将项目部署到Github上面</p><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">hexo g<br>hexo d</span><br></code></pre></td></tr></table></figure><p>但是输入hexo d可能会报ERROR Deployer not fount： git错误，这是因为没有安装hexo-deployer-git这个模块，导致Git不能识别该命令，输入下面指令安装该模块即可。</p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>安装该模块的时间由网速决定，因为Github毕竟是国外的网站，并不是很稳定，所以请读者耐心等待。有事可能会因为断网等导致该模块安装失败，安装失败时还请读者多试两边。等模块安装完再次执行</p><figure class="hljs highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>这是就会有弹出框，输入自己之前注册的github账号进行登录即可，然后浏览器输入Chakid.github.io进行访问即可，（将Chakid改成自己之前注册的Github的用户名即可） 这时就会发现可以访问自己之前在本地预览的页面了。</p><h2 id="此时是不是有着一丝丝的成就感，终于有了属于自己的博客。"><a href="#此时是不是有着一丝丝的成就感，终于有了属于自己的博客。" class="headerlink" title="此时是不是有着一丝丝的成就感，终于有了属于自己的博客。"></a>此时是不是有着一丝丝的成就感，终于有了属于自己的博客。</h2><h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a><strong>附录：</strong></h2><p>常用指令</p><figure class="hljs highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">hexo g #完整命令为hexo <span class="hljs-keyword">generate</span>,用于生成静态文件<br>hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览<br>hexo d #完整命令为hexo deploy,用于将本地文件发布到github上<br>hexo n #完整命令为hexo <span class="hljs-keyword">new</span>,用于新建一篇文章<br></code></pre></td></tr></table></figure><p>转载自<a href="https://www.chakid.com/" target="_blank" rel="noopener">https://www.chakid.com/</a> ，感谢该作者。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法：最大公约数</title>
      <link href="/2019/06/01/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
      <url>/2019/06/01/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>#欧几里得算法：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。</p><p>问题：求p,q的最大公约数：</p><blockquote><p>（1）若q=0;p为最大公约数；<br>（2）否则，p除以q的余数r，p和q的最大公约数为q与r的最大公约数</p></blockquote><figure class="hljs highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GongYueShu</span> &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gongyueshu</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y</span>)</span> &#123;<br><br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>) <br><span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">int</span> r=x%y;<br><span class="hljs-keyword">return</span> gongyueshu(y, r);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String arg[]</span>)</span> &#123;<br><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"公约数："</span>+gongyueshu(<span class="hljs-number">100</span>, <span class="hljs-number">20</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Maven的C3P0连接池使用教程</title>
      <link href="/2019/03/26/%E5%9F%BA%E4%BA%8EMaven%E7%9A%84C3P0%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/03/26/%E5%9F%BA%E4%BA%8EMaven%E7%9A%84C3P0%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么使用C3P0"><a href="#为什么使用C3P0" class="headerlink" title="为什么使用C3P0:"></a>为什么使用C3P0:</h2><p>一般我们在项目中操作数据库时，都是每次需要操作数据库就建立一个连接，操作完成后释放连接。因为jdbc没有保持连接的能力，一旦超过一定时间没有使用（大约几百毫秒），连接就会被自动释放掉。而每次新建连接都需要140毫秒左右的时间，所以耗费时间比较多。若使用C3P0连接池来池化连接，随时取用，则平均每次取用只需要10-20毫秒。这在高并发随机访问数据库的时候对效率的提升有很大帮助。<br>     C3P0连接池会根据你的配置来初始化N个数据库连接，空闲T时间后连接过期又会自动新建K个连接使得连接池总有空闲的数据库连接等待被取用。我们只需通过dataSourse.getConnection()即可从线程池中取用一个已经连接好的空闲连接，执行数据库操作。然后“断开”（放回）这个连接，把这个连接的使用权放回连接池。真正的数据库连接的创建与释放是由C3P0在后台自动完成的，我们花的只是取用与释放占用权的时间。全程耗时10+毫秒，比原来提高了几十倍。</p><p><strong>C3P0连接池使用教程</strong><br>Maven项目导入jar包依赖：</p><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在src目录下新建一个名叫-c3p0-config-xml-的文件，注意，必须是这个文件名。"><a href="#在src目录下新建一个名叫-c3p0-config-xml-的文件，注意，必须是这个文件名。" class="headerlink" title="在src目录下新建一个名叫  c3p0-config.xml  的文件，注意，必须是这个文件名。"></a>在src目录下新建一个名叫  c3p0-config.xml  的文件，注意，必须是这个文件名。</h2><figure class="hljs highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--默认配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">default-config</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialPoolSize"</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdleTime"</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxPoolSize"</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minPoolSize"</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxStatements"</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">default-config</span>&gt;</span>  <br>  <br>   <span class="hljs-comment">&lt;!--配置连接池mysql--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">named-config</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mysql"</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/CoupleSpace<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"user"</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialPoolSize"</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdleTime"</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxPoolSize"</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minPoolSize"</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxStatements"</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">named-config</span>&gt;</span>  <br>    <br>    <span class="hljs-comment">&lt;!--配置连接池2--&gt;</span><br>    ......<br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>如何使用</strong></p><figure class="hljs highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C3p0Utils</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> org.apache.log4j.Logger logger=org.apache.log4j.Logger.getLogger(C3p0Utils.class.getName());<br>    <br>    <span class="hljs-comment">//通过标识名来创建相应连接池</span><br>    <span class="hljs-keyword">static</span> ComboPooledDataSource dataSource=<span class="hljs-keyword">new</span> ComboPooledDataSource(<span class="hljs-string">"mysql"</span>);<br>    <span class="hljs-comment">//从连接池中取用一个连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function">Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> dataSource.<span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>;<br>            <br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.<span class="hljs-keyword">error</span>(<span class="hljs-string">"Exception in C3p0Utils!"</span>, e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyError(<span class="hljs-string">"数据库连接出错!"</span>, e);            <br>        &#125;<br>    &#125;    <br>    <span class="hljs-comment">//释放连接回连接池</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn,PreparedStatement pst,ResultSet rs)</span></span>&#123;  <br>            <span class="hljs-keyword">if</span>(rs!=<span class="hljs-keyword">null</span>)&#123;  <br>                <span class="hljs-keyword">try</span> &#123;  <br>                    rs.close();  <br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;  <br>                    logger.<span class="hljs-keyword">error</span>(<span class="hljs-string">"Exception in C3p0Utils!"</span>, e);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyError(<span class="hljs-string">"数据库连接关闭出错!"</span>, e);            <br>                &#125;  <br>            &#125;  <br>            <span class="hljs-keyword">if</span>(pst!=<span class="hljs-keyword">null</span>)&#123;  <br>                <span class="hljs-keyword">try</span> &#123;  <br>                    pst.close();  <br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;  <br>                    logger.<span class="hljs-keyword">error</span>(<span class="hljs-string">"Exception in C3p0Utils!"</span>, e);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyError(<span class="hljs-string">"数据库连接关闭出错!"</span>, e);    <br>                &#125;  <br>            &#125;  <br>      <br>            <span class="hljs-keyword">if</span>(conn!=<span class="hljs-keyword">null</span>)&#123;  <br>                <span class="hljs-keyword">try</span> &#123;  <br>                    conn.close();  <br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;  <br>                    logger.<span class="hljs-keyword">error</span>(<span class="hljs-string">"Exception in C3p0Utils!"</span>, e);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyError(<span class="hljs-string">"数据库连接关闭出错!"</span>, e);    <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql,Oracle,SQL server 分页查询</title>
      <link href="/2018/12/16/Mysql-Oracle-SQL-server-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/12/16/Mysql-Oracle-SQL-server-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql分页查询"><a href="#Mysql分页查询" class="headerlink" title="Mysql分页查询"></a>Mysql分页查询</h2><p><strong>PageNo 为当前页数，PageSize为每页的条数</strong></p><figure class="hljs highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span>    *<br><span class="hljs-keyword">FROM</span>  TABLE_NAME<br><span class="hljs-keyword">LIMIT</span> (PageNo - <span class="hljs-number">1</span>) * PageSize,PageSize;<br></code></pre></td></tr></table></figure><h2 id="Oracel的分页查询："><a href="#Oracel的分页查询：" class="headerlink" title="Oracel的分页查询："></a>Oracel的分页查询：</h2><p><strong>其中最内层的查询SELECT * FROM TABLE_NAME表示不进行翻页的原始查询语句。ROWNUM &lt;= 40和RN &gt;= 21控制分页查询的每页的范围。</strong></p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span>  <br>(  <br><span class="hljs-keyword">SELECT</span> A.*, <span class="hljs-keyword">ROWNUM</span> RN  <br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> TABLE_NAME) A  <br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">ROWNUM</span> &lt;= <span class="hljs-number">40</span>  <br>)  <br><span class="hljs-keyword">WHERE</span> RN &gt;= <span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><h2 id="SQL-Server分页查询"><a href="#SQL-Server分页查询" class="headerlink" title="SQL Server分页查询"></a>SQL Server分页查询</h2><p><strong>假设每页的条数是10，现在要拿出第5页的内容，查询语句如下：</strong></p><figure class="hljs highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> top <span class="hljs-number">10</span> *<br><span class="hljs-keyword">from</span> TABLE_NAME<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>(<br> 条数是这么计算出来的：<span class="hljs-number">10</span>*(<span class="hljs-number">5</span><span class="hljs-number">-1</span>)=<span class="hljs-number">40</span><br> <span class="hljs-keyword">select</span> top <span class="hljs-number">40</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">test</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">id</span><br>)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">id</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/08/16/hello-world/"/>
      <url>/2017/08/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p><strong>教育经历</strong></p><blockquote><p>东莞理工学院 - 软件工程专业（教育部“卓越工程师计划“） 本科 网络空间安全学院 2016年9月 - 2020年6月<br>GPA：3.56 / 5.0（专业前5%）</p></blockquote><p><strong>荣誉证书</strong></p><blockquote><p>2016-2017学年东莞理工学院一等奖学金<br>2016-2017学年校级优秀大学生称号<br>2017-2018学年校级优秀学生干部<br>2017-2018学年四六级证书<br>2018-2019学年全国大学生创新创业实践项目（省级）<br>2018-2019学年第十届蓝桥杯全国软件和信息技术专业人才大赛—个人赛省赛（软件类）三等奖       </p></blockquote><p><strong>项目经历</strong></p><blockquote><p>大学生通过填写的信息，智能匹配CP。CP可以参加交友平台发布的线上线下活动，增进彼此的感情， 也可以到社区发布心情，平台会一直跟进CP的亲密度变化。</p></blockquote><p><strong>项目职责：</strong></p><blockquote><p>1.参与项目的需求分析、可行性分析，完成详细设计；<br>2.负责数据库的设计及SQL的编写；<br>3.作为后端开发人员，负责后台与数据库的连接，后端与前端数据的交互，及后端大部分功能的实现；<br>4.在Linux下进行程序部署，负责数据库和服务器的日常维护和管理。</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
